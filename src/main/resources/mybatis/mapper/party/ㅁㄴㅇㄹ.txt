<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.dream.bbs.party.mapper.PartyMapper">
	<!--resultMap : Projection결과를 객체 속성에 바인딩 // 데이터를 가져올때 작성되는 JDBC코드를 대부분 줄여주는 역할을 담당 -->
	<resultMap id="rmPartyVO" extends="nsEntity.rmMasterEntity"
		type="www.dream.bbs.party.model.PartyVO">
		<result property="name" column="name" />
		<result property="nick" column="nick" />
		<result property="pwd" column="pwd" />

		
		
		
		
		<!-- 1:N Query. 성능 향상 -->
		<!--collection  -->
		<collection property="listContactPoint" columnPrefix="cp_"
			resultMap="rmContactPointVO">
		</collection>
		<!-- 인가(Aughorization) 처리를 위한 것 -->
		<collection property="listAccountability" columnPrefix="role_"
			resultMap="rmAccountabilityVO">
		</collection>
		
		
		<!-- discriminator 상속할때 -->
		<discriminator javaType="String" column="descrim">
			<case value="PersonVO" resultMap="rmPersonVO" />
			<case value="OrganizationVO" resultMap="rmOrganizationVO" />
		</discriminator>
	</resultMap>

	<resultMap id="PersonVO" extends="rmPartyVO"
		type="www.dream.bbs.party.model.PersonVO">
		<result property="sex" column="sex" />
	</resultMap>
	<resultMap id="rmOrganizationVO" extends="rmPartyVO"
		type="www.dream.bbs.party.model.OrganizationVO" />

	<resultMap id="rmContactPointVO"
		type="www.dream.bbs.party.model.ContactPointVO">
		<id property="cpType" column="cp_type" />
		<result property="cpVal" column="cp_val" />
	</resultMap>




	<resultMap id="rmAccountabilityVO" extends="nsEntity.rmMasterEntity"
		type="www.dream.bbs.party.model.AccountabilityVO">
		<result property="accountType" column="account_type" />
		<result property="ownerId" column="owner_id" />
		<result property="responsId" column="respons_id" />
	</resultMap>




<!-- public List<PersonVO> listAllMember(OrganizationVO organizationVO); 오너아이디(해당회사)를 받아서 -->

	<select id="listAllMember" resultMap="rmPartyVO">
		SELECT mem.*, cp.cp_type cp_cp_type, cp.cp_val cp_cp_val
		  FROM T_Accountability role, T_party mem LEFT OUTER JOIN T_contact_point cp 
		    on mem.id=cp.owner_id
		 where role.owner_id = #{id}
		   and role.account_type = 'member'
		   and role.alive = true
		   and role.respons_id = mem.id;
	</select>


<!-- public PartyVO findById(String nick); -->

<select id="findById" resultMap="rmPartyVO">
		SELECT p.*, role.id role_id, role.account_type role_account_type, role.respons_id role_respons_id, role.alive role_alive, role.reg_dt role_reg_dt, role.upt_dt role_upt_dt, cp.owner_id cp_owner_id, cp.cp_type cp_cp_type, cp_cp_type
		  FROM T_party p 
		  join T_Accountability role 
		    on p.id = role.respons_id
		  LEFT OUTER JOIN T_contact_point cp 
		    on p.id=cp.owner_id
		 where p.nick = #{nick}
		   and p.alive = true;
	</select>

<!-- 	public int createMOrganization(OrganizationVO organizationVO); -->

	<insert id="createMOrganization">
		<selectKey keyProperty="id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_party')
		</selectKey>

		INSERT INTO T_party(id, descrim, name, nick, pwd)
		            VALUES (#{id}, 'Organization', #{name}, #{nick}, #{pwd});

		INSERT INTO T_contact_point(Owner_id, cp_type, cp_val)
		VALUES
		<foreach item="cp" collection="listContactPoint"
			separator=", " close=";">
			(#{id}, #{cp.cpType}, #{cp.cpVal})
		</foreach>
	</insert>



<!--	public int createMember(MemberVO Member); -->
	
	<insert id="createMember">
		<selectKey keyProperty="id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_party')
		</selectKey>

		INSERT INTO T_party(id, descrim, name, nick, pwd, sex)
		            VALUES (#{id}, 'Member', #{name}, #{nick}, #{pwd}, #{sex});

		INSERT INTO T_contact_point(Owner_id, cp_type, cp_val)
		VALUES
		<foreach item="cp" collection="listContactPoint"
			separator=", " close=";">
			(#{id}, #{cp.cpType}, #{cp.cpVal})
		</foreach>
	</insert>

	
<!-- 	public int updateParty(PartyVO party); -->

	<update id="updateParty">
		update T_party
		   set pwd = #{pwd},
		 where id = #{id};
	</update>
	
	
<!-- 		public int deactivateParty(PartyVO partyVO); -->

	<update id="deactivateParty">
		update T_party
		   set alive = false,
		 where id = #{id};
	</update>






</mapper>
